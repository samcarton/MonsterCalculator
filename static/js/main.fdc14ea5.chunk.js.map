{"version":3,"sources":["components/input-scaled-output.tsx","services/monster-calculator-service.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["InputScaledOutput","props","input","scaledInput","onChange","style","display","type","value","event","parseInt","target","width","textAlign","readOnly","crChartMappings","attributeNames","ScaleAttribute","arg","inputCrMapping","find","mapping","challengeRating","challengeRatingInput","console","log","inputCrMaxAttributeValue","getValueFunction","targetCrMapping","challengeRatingToScaleTo","targetCrMaxAttributeValue","scaledAttribute","attributeValue","Math","round","availableCrs","App","useState","leftCr","setLeftCr","rightCr","setRightCr","inputPb","setInputPb","scaledPb","setScaledPb","inputAc","setInputAc","scaledAc","setScaledAc","inputHp","setInputHp","scaledHp","setScaledHp","inputAb","setInputAb","scaledAb","setScaledAb","inputDr","setInputDr","scaledDr","setScaledDr","inputDc","setInputDc","scaledDc","setScaledDc","handleInputChange","attribute","getChartPbValue","proficiencyBonus","getChartAcValue","armorClass","getChartHpValue","hitPoints","getChartAbValue","attackBonus","getChartDrValue","damagePerRound","getChartDcValue","saveDifficultyCheck","useEffect","marginLeft","marginBottom","parseFloat","map","n","e","marginTop","onClick","guessedCr","numberToAverageBy","totalCr","forEach","attributeName","largerEntries","filter","length","nextLargerEntries","maxMappingEntry","averageCr","closestCrMapping","GuessCr","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fdc14ea5.chunk.js","sourcesContent":["import React, {ChangeEvent, useState} from 'react';\r\n\r\nexport interface OnChangeFunction {\r\n    (event: number): void\r\n}\r\n\r\nexport interface InputScaledOutputProps {\r\n  input: number,\r\n  scaledInput: number,\r\n  onChange: OnChangeFunction\r\n}\r\n\r\nexport const InputScaledOutput : React.FC<InputScaledOutputProps> = (props) => {\r\n    const {input, scaledInput, onChange} = props;\r\n    const handlePbChange = (event:ChangeEvent<HTMLInputElement>) => {\r\n        onChange(parseInt(event.target.value));\r\n    };\r\n\r\n    return  <div style={{display:\"inline\"}}>\r\n                <input type=\"number\" value={input} onChange={handlePbChange} style={{width:60, textAlign:\"right\",}}/><input readOnly value={scaledInput} style={{width:60, textAlign:\"right\"}}/>\r\n            </div>;\r\n};\r\n\r\n","import crChart from '../reference/cr-chart.json';\r\n\r\nconst crChartMappings : CrChartMapping[] = crChart;\r\n\r\nconst attributeNames : string[] = [\r\n    \"proficiencyBonus\",\r\n\"armorClass\",\r\n\"hitPoints\",\r\n\"attackBonus\",\r\n\"damagePerRound\",\r\n\"saveDifficultyCheck\"];\r\n\r\n// interface for the \"get value\" callback function\r\nexport interface GetValueFunction {\r\n    (mapping: CrChartMapping): number\r\n}\r\n\r\nexport interface CrChartMapping{\r\n    [index: string]: number;\r\n    challengeRating:number,\r\n    proficiencyBonus:number,\r\n    armorClass:number,\r\n    hitPoints:number,\r\n    attackBonus:number,\r\n    damagePerRound:number,\r\n    saveDifficultyCheck:number\r\n}\r\n\r\nexport interface ScaleAttributeArgs {\r\n    attributeValue: number,\r\n    challengeRatingInput: number,\r\n    challengeRatingToScaleTo: number,\r\n    getValueFunction: GetValueFunction\r\n}\r\n\r\n// MonsterCalc.java -> updateFields\r\n// Scale the input attribute based on the given CR ratings.\r\nexport function ScaleAttribute(arg : ScaleAttributeArgs) : number {\r\n\r\n    let inputCrMapping = crChartMappings.find(mapping => mapping.challengeRating === arg.challengeRatingInput);\r\n    if(!inputCrMapping)\r\n    {\r\n        console.log(\"Input CR mapping not found\");\r\n        return -1;\r\n    }\r\n\r\n    let inputCrMaxAttributeValue = arg.getValueFunction(inputCrMapping);\r\n\r\n    let targetCrMapping = crChartMappings.find(mapping => mapping.challengeRating === arg.challengeRatingToScaleTo);\r\n\r\n    if(!targetCrMapping)\r\n    {\r\n        console.log(\"Target CR mapping not found\");\r\n        return -1;\r\n    }\r\n\r\n    let targetCrMaxAttributeValue = arg.getValueFunction(targetCrMapping);\r\n\r\n    let scaledAttribute = arg.attributeValue/inputCrMaxAttributeValue * targetCrMaxAttributeValue;\r\n    return Math.round(scaledAttribute);\r\n}\r\n\r\nexport interface GuessCrArgs {\r\n    [index: string]: number;\r\n    proficiencyBonus:number,\r\n    armorClass:number,\r\n    hitPoints:number,\r\n    attackBonus:number,\r\n    damagePerRound:number,\r\n    saveDifficultyCheck:number\r\n}\r\n\r\n// MonsterCalc.java -> GuessCR\r\n// Given the inputted attributes, try to guess what the CR would be based on the cr-chart table CR for each attribute.\r\nexport function GuessCr(arg : GuessCrArgs) : number {\r\n    // for each input attribute,\r\n    // get the CR mapping entry where the matching attribute value is greater than or equal to the input value (if there are multiple equal attribute values, use the one with the maximum CR).\r\n    //   If there is no entry, assume a max CR of 30\r\n    // collect the CRs of these levels, then average based on the number of found CRs\r\n    const defaultMaxCr = 30;\r\n    let numberToAverageBy = 0;\r\n    let totalCr = 0;\r\n\r\n    attributeNames.forEach(attributeName => {\r\n        console.log(attributeName, arg[attributeName]);\r\n        if(arg[attributeName])    {\r\n            let largerEntries = crChartMappings.filter(mapping => mapping[attributeName] >= arg[attributeName]);\r\n            if(largerEntries && largerEntries.length > 0){\r\n                let nextLargerEntries = largerEntries.filter(mapping => mapping[attributeName] === largerEntries[0][attributeName]);\r\n                let maxMappingEntry = nextLargerEntries[nextLargerEntries.length-1];\r\n                totalCr += maxMappingEntry.challengeRating;\r\n            } else {\r\n                totalCr += defaultMaxCr;\r\n            }\r\n            numberToAverageBy += 1;\r\n        }\r\n    });\r\n\r\n    if(numberToAverageBy > 0){\r\n        console.log(\"average CR:\", totalCr/numberToAverageBy);\r\n        let averageCr = totalCr/numberToAverageBy;\r\n        let closestCrMapping = crChartMappings.find(mapping => mapping.challengeRating >= averageCr);\r\n        if(closestCrMapping){\r\n            console.log(\"closest mapped CR:\", closestCrMapping.challengeRating);\r\n            return closestCrMapping.challengeRating;\r\n        }\r\n    }\r\n\r\n    return 0;\r\n}","import React, {ChangeEvent, useEffect, useState} from 'react';\r\nimport './App.css';\r\nimport {InputScaledOutput} from \"./components/input-scaled-output\";\r\nimport {CrChartMapping, GuessCr, ScaleAttribute, ScaleAttributeArgs} from \"./services/monster-calculator-service\";\r\n\r\nconst availableCrs = [0, 1 / 8, 1 / 4, 1 / 2, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,\r\n    14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30];\r\n\r\nconst App: React.FC = () => {\r\n    //#region CRs\r\n    const [leftCr, setLeftCr] = useState<number>(0);\r\n    const [rightCr, setRightCr] = useState<number>(0);\r\n\r\n    const handleLeftCrChange = (event:ChangeEvent<HTMLSelectElement>) => {\r\n        setLeftCr(parseFloat(event.target.value));\r\n        console.log(\"left cr changed to \", event.target.value);\r\n    };\r\n\r\n    const handleRightCrChange = (event:ChangeEvent<HTMLSelectElement>) => {\r\n        setRightCr(parseFloat(event.target.value));\r\n        console.log(\"right cr changed to \", event.target.value);\r\n    };\r\n    //#endregion\r\n\r\n    //#region Attribute State\r\n    const [inputPb, setInputPb] = useState<number>(1);\r\n    const [scaledPb, setScaledPb] = useState<number>(1);\r\n\r\n    const [inputAc, setInputAc] = useState<number>(1);\r\n    const [scaledAc, setScaledAc] = useState<number>(1);\r\n\r\n    const [inputHp, setInputHp] = useState<number>(1);\r\n    const [scaledHp, setScaledHp] = useState<number>(1);\r\n\r\n    const [inputAb, setInputAb] = useState<number>(1);\r\n    const [scaledAb, setScaledAb] = useState<number>(1);\r\n\r\n    const [inputDr, setInputDr] = useState<number>(1);\r\n    const [scaledDr, setScaledDr] = useState<number>(1);\r\n\r\n    const [inputDc, setInputDc] = useState<number>(1);\r\n    const [scaledDc, setScaledDc] = useState<number>(1);\r\n\r\n    const handleInputChange = (event:number, attribute:string) => {\r\n        switch (attribute) {\r\n            case \"PB\":\r\n                setInputPb(event);\r\n                break;\r\n            case \"AC\":\r\n                setInputAc(event);\r\n                break;\r\n            case \"HP\":\r\n                setInputHp(event);\r\n                break;\r\n            case \"AB\":\r\n                setInputAb(event);\r\n                break;\r\n            case \"DR\":\r\n                setInputDr(event);\r\n                break;\r\n            case \"DC\":\r\n                setInputDc(event);\r\n                break;\r\n        }\r\n    };\r\n    //#endregion\r\n\r\n    //#region scaling functions\r\n    const getChartPbValue = (mapping:CrChartMapping) => mapping.proficiencyBonus;\r\n    const getChartAcValue = (mapping:CrChartMapping) => mapping.armorClass;\r\n    const getChartHpValue = (mapping:CrChartMapping) => mapping.hitPoints;\r\n    const getChartAbValue = (mapping:CrChartMapping) => mapping.attackBonus;\r\n    const getChartDrValue = (mapping:CrChartMapping) => mapping.damagePerRound;\r\n    const getChartDcValue = (mapping:CrChartMapping) => mapping.saveDifficultyCheck;\r\n\r\n    useEffect(() => {setScaledPb(ScaleAttribute({attributeValue: inputPb, challengeRatingInput: leftCr, challengeRatingToScaleTo: rightCr, getValueFunction: getChartPbValue})); }, [inputPb, leftCr, rightCr]);\r\n    useEffect(() => {setScaledAc(ScaleAttribute({attributeValue: inputAc, challengeRatingInput: leftCr, challengeRatingToScaleTo: rightCr, getValueFunction: getChartAcValue})); }, [inputAc, leftCr, rightCr]);\r\n    useEffect(() => {setScaledHp(ScaleAttribute({attributeValue: inputHp, challengeRatingInput: leftCr, challengeRatingToScaleTo: rightCr, getValueFunction: getChartHpValue})); }, [inputHp, leftCr, rightCr]);\r\n    useEffect(() => {setScaledAb(ScaleAttribute({attributeValue: inputAb, challengeRatingInput: leftCr, challengeRatingToScaleTo: rightCr, getValueFunction: getChartAbValue})); }, [inputAb, leftCr, rightCr]);\r\n    useEffect(() => {setScaledDr(ScaleAttribute({attributeValue: inputDr, challengeRatingInput: leftCr, challengeRatingToScaleTo: rightCr, getValueFunction: getChartDrValue})); }, [inputDr, leftCr, rightCr]);\r\n    useEffect(() => {setScaledDc(ScaleAttribute({attributeValue: inputDc, challengeRatingInput: leftCr, challengeRatingToScaleTo: rightCr, getValueFunction: getChartDcValue})); }, [inputDc, leftCr, rightCr]);\r\n    //#endregion\r\n\r\n    const handleGuessCrClick = () => {\r\n        let guessedCr = GuessCr({\r\n            proficiencyBonus: inputPb,\r\n            armorClass: inputAc,\r\n            hitPoints: inputHp,\r\n            attackBonus: inputAb,\r\n            damagePerRound: inputDr,\r\n            saveDifficultyCheck: inputDc\r\n        });\r\n\r\n        setLeftCr(guessedCr);\r\n    };\r\n\r\n    return (\r\n    <div style={{marginLeft:15}}>\r\n      <h3>Monster Calculator</h3>\r\n        <div style={{marginBottom:15}}>\r\n            <div>CR | Select your CR on the left, and the target CR to scale to on the right.</div>\r\n            <div>If you are unsure of your CR, enter your values and hit \"Guess the CR\".</div>\r\n            <select\r\n                value={leftCr}\r\n                onChange={handleLeftCrChange}>\r\n                {availableCrs.map((n) => (<option>{n}</option>))}\r\n            </select>\r\n            <select\r\n                value={rightCr}\r\n                onChange={handleRightCrChange}>\r\n                {availableCrs.map((n) => (<option>{n}</option>))}\r\n            </select>\r\n        </div>\r\n        <div style={{marginBottom:15}}><div>PB | Proficiency Bonus (easiest way to determine this is to take Attack Bonus - Strength Modifier)</div> <InputScaledOutput input={inputPb} scaledInput={scaledPb} onChange={(e) => handleInputChange(e,\"PB\")}/></div>\r\n        <div style={{marginBottom:15}}><div>AC | Armor Class</div> <InputScaledOutput input={inputAc} scaledInput={scaledAc} onChange={(e) => handleInputChange(e,\"AC\")}/></div>\r\n        <div style={{marginBottom:15}}><div>HP | Hit Points</div> <InputScaledOutput input={inputHp} scaledInput={scaledHp} onChange={(e) => handleInputChange(e,\"HP\")}/></div>\r\n        <div style={{marginBottom:15}}><div>AB | Attack Bonus</div> <InputScaledOutput input={inputAb} scaledInput={scaledAb} onChange={(e) => handleInputChange(e,\"AB\")}/></div>\r\n        <div style={{marginBottom:15}}><div>DR | Average Damage per Round</div> <InputScaledOutput input={inputDr} scaledInput={scaledDr} onChange={(e) => handleInputChange(e,\"DR\")}/></div>\r\n        <div style={{marginBottom:15}}><div>DC | Save DC of any abilities or Spells they have</div> <InputScaledOutput input={inputDc} scaledInput={scaledDc} onChange={(e) => handleInputChange(e,\"DC\")}/></div>\r\n\r\n        <div style={{marginTop:15}}>\r\n            <div>Guess the CR based on the input attribute values</div>\r\n            <button  onClick={handleGuessCrClick}>Guess the CR</button></div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}